int BFS(int u,vector<vector<int>>& adj,int n,vector<int>& grey,int forbidden)
{
    queue<int> q;
    if(!grey[u])
        q.push(u);
    grey[u]=1;
    int ret=0;
    while(!q.empty())
    {
        ++ret;
        u=q.front();
        q.pop();
        for(int v:adj[u])
            if(!grey[v]&&v!=forbidden)
            {
                grey[v]=1;
                q.push(v);
            }
    }
    return ret;
}
int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) 
{
    int n=graph.size();
    vector<vector<int>> adj(n);
    for(int i=0;i<n;++i)
        for(int j=0;j<n;++j)
            if(graph[i][j])
            {
                adj[i].push_back(j);
                adj[j].push_back(i);
            }
    int ret=n,val=INT_MAX;
    for(int i=0;i<initial.size();++i)
    {
        int temp=0;
        vector<int> grey(n,0);
        for(int j=0;j<initial.size();++j)
            if(j==i)
                continue;
            else
                temp+=BFS(initial[j],adj,n,grey,initial[i]);
        if(temp<val)
        {
            ret=initial[i];
            val=temp;
        }
        else if(temp==val&&initial[i]<ret)
            ret=initial[i];
            
    }
    return ret;
}
